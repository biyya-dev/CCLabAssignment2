using System;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace PasswordGeneratorApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void btnGenerate_Click(object sender, EventArgs e)
        {
            try
            {
                // Get input from textboxes
                string registrationNumber = txtRegistrationNumber.Text;
                string firstName = txtFirstName.Text;
                string lastName = txtLastName.Text;
                string movie = txtMovie.Text;

                // Generate the password
                string password = GeneratePassword(registrationNumber, firstName, lastName, movie);

                // Display the generated password
                txtPassword.Text = password;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Password Generation Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private string GeneratePassword(string registrationNumber, string firstName, string lastName, string movie)
        {
            // Step 1: Extract two digits from the registration number
            string regDigits = Regex.Match(registrationNumber, @"\d{2}").Value;

            // Step 2: Extract the second letters from first and last names
            string secondLetterFirstName = firstName.Length >= 2 ? firstName[1].ToString() : "";
            string secondLetterLastName = lastName.Length >= 2 ? lastName[1].ToString() : "";

            // Step 3: Extract two characters from favorite movie
            string movieChars = movie.Length >= 2 ? movie.Substring(0, 2) : "";

            // Step 4: Include special characters, avoiding '#'
            string specialChars = "@$%&*";

            // Combine elements
            string combined = regDigits + secondLetterFirstName + secondLetterLastName + movieChars + specialChars;

            // Adjust the password length to 14
            if (combined.Length < 14)
            {
                combined += new string('X', 14 - combined.Length);  // Fill with 'X' if needed
            }
            else if (combined.Length > 14)
            {
                combined = combined.Substring(0, 14); // Trim to 14 characters
            }

            // Validate length and lack of '#' character
            if (combined.Length == 14 && !combined.Contains("#"))
            {
                return combined;
            }
            else
            {
                throw new Exception("Password generation failed.");
            }
        }
    }
}
